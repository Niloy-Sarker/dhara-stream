name: Build and Release Windows App

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'package.json' # Trigger when package.json changes (likely version updates)
  workflow_dispatch: # Allow manual triggering
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'standard'
        type: choice
        options:
          - standard
          - pre-release

jobs:
  build-windows:
    runs-on: windows-latest
    permissions:
      contents: write # Required for creating releases
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for proper versioning
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install Dependencies
        run: npm install

      # Extract version information from package.json
      - name: Extract Version Info
        id: package-info
        run: |
          echo "app_name=$(node -p "require('./package.json').name")" >> $GITHUB_OUTPUT
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
          echo "product_name=$(node -p "require('./package.json').build.productName || require('./package.json').name")" >> $GITHUB_OUTPUT
          # Create clean version tag (v1.0.0)
          echo "version_tag=v$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
        shell: bash
      
      # Check if tag already exists
      - name: Check if tag exists
        id: tag-check
        run: |
          git fetch --tags
          TAG_EXISTS=$(git tag -l "${{ steps.package-info.outputs.version_tag }}")
          if [ -n "$TAG_EXISTS" ]; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi
        shell: bash
      
      # Create tag if it doesn't exist
      - name: Create Release Tag
        if: steps.tag-check.outputs.tag_exists == 'false'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a ${{ steps.package-info.outputs.version_tag }} -m "Release ${{ steps.package-info.outputs.version_tag }}"
          echo "RELEASE_TAG=${{ steps.package-info.outputs.version_tag }}" >> $GITHUB_ENV
        shell: bash
      
      # Build Windows binaries
      - name: Build Windows App
        run: npm run build:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_IDENTITY_AUTO_DISCOVERY: false
      
      # Generate release notes from changelog
      - name: Prepare Release Notes
        id: release-notes
        run: |
          if [ -f CHANGELOG.md ]; then
            # Read changelog and update with current version
            CHANGELOG_CONTENT=$(cat CHANGELOG.md | sed "s/\[VERSION\]/${{ steps.package-info.outputs.version }}/g")
            echo "$CHANGELOG_CONTENT" > release_notes.md
            
            # Add build information footer
            echo -e "\n## Build Information\nBuild Date: $(date +'%Y-%m-%d')\nVersion: ${{ steps.package-info.outputs.version }}" >> release_notes.md
          else
            # Create simple release notes if no changelog
            echo "# Release ${{ steps.package-info.outputs.version_tag }}" > release_notes.md
            echo -e "\nBuild Date: $(date +'%Y-%m-%d')\n" >> release_notes.md
          fi
          echo "notes_file=release_notes.md" >> $GITHUB_OUTPUT
        shell: bash
      
      # List build artifacts
      - name: List Build Artifacts
        run: |
          ls -la dist/
        shell: bash
      
      # Create GitHub Release
      - name: Create Release
        id: create_release
        if: steps.tag-check.outputs.tag_exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          name: "Release ${{ steps.package-info.outputs.version }}"
          tag_name: ${{ steps.package-info.outputs.version_tag }}
          draft: false
          prerelease: ${{ github.event.inputs.release_type == 'pre-release' }}
          files: |
            dist/*.exe
            dist/${{ steps.package-info.outputs.product_name }}*.exe
          body_path: ${{ steps.release-notes.outputs.notes_file }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      
      # Push the tag to the repository
      - name: Push Tag
        if: steps.tag-check.outputs.tag_exists == 'false'
        run: |
          git push origin ${{ steps.package-info.outputs.version_tag }}
        shell: bash
